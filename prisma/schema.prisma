// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?

    @@index([name])
}

enum Role {
    USER
    ADMIN
    SUPER_ADMIN
}

model Address {
    id      Int     @id @default(autoincrement())
    street  String
    city    String
    zipCode String
    state   String?
    country String
    User    User[]
}

model User {
    id               String  @id @unique
    email            String  @unique
    phoneNumber      String?
    stripeCustomerId String? @unique
    firstName        String
    lastName         String
    profileImageUrl  String?

    address   Address? @relation(fields: [addressId], references: [id])
    addressId Int?

    posts Post[]

    role         Role      @default(USER)
    isPremium    Boolean   @default(false)
    PremiumUntil DateTime?

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    EmailLog  EmailLog[]

    @@index([id])
}

model EmailGroup {
    id          String          @id @default(cuid())
    name        String
    description String?
    members     String[] // Array of email addresses
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    isArchived  Boolean         @default(false)
    schedules   EmailSchedule[]
}

model EmailSchedule {
    id             String        @id @default(cuid())
    name           String
    description    String?
    templateId     String
    template       EmailTemplate @relation(fields: [templateId], references: [id])
    groupId        String?
    group          EmailGroup?   @relation(fields: [groupId], references: [id])
    cronExpression String // e.g., "0 9 * * *" for daily at 9 AM
    isActive       Boolean       @default(true)
    lastRun        DateTime?
    nextRun        DateTime?
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    logs           EmailLog[] // Add this relation
    error          String?
}

model IncomingEmail {
    id          String   @id @default(cuid())
    from        String
    to          String
    subject     String
    text        String?
    html        String?
    headers     Json? // Store full email headers
    attachments Json? // Store attachment metadata
    receivedAt  DateTime @default(now())
    status      String // processed, pending, error
    error       String?
}

model EmailTemplate {
    id         String          @id @default(cuid())
    name       String
    subject    String
    text       String
    html       String?
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
    isArchived Boolean         @default(false)
    schedules  EmailSchedule[]
}

model EmailLog {
    id         String         @id @default(cuid())
    to         String
    subject    String
    text       String
    html       String?
    status     String // success, failed
    error      String?
    createdAt  DateTime       @default(now())
    userId     String? // optional link to who sent it
    user       User?          @relation(fields: [userId], references: [id])
    scheduleId String? // Add this field
    schedule   EmailSchedule? @relation(fields: [scheduleId], references: [id]) // Add this relation
}
